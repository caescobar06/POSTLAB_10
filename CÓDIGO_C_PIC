//AUTOR: CARLOS ESCOBAR
//FECHA DE CREACIÓN: 08/05/2023
//ÚLTIMA MODIFICACIÓN: 08/05/2023

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

/*******************************LIBRERIAS***********************************/
#include <stdio.h>
#include <xc.h>
#include <stdint.h>
#include <stdlib.h>
#include <pic16f887.h>

#define _XTAL_FREQ 8000000 //FRECUENCIA DEL OSCILADOR 


/******************************Variables Globlales**************************/

char opcion;
uint8_t contador = 0;
char menu[] =  "\rMenu: \r 1)Enviar un Valor \r 2)Recibir el valor del contador \r";

/******************************PROTOTIPOS***********************************/
void setup(void);
void initUART(void);

void cadena(char txt[]); //FUNCIÓN PARA LA CADENA
void POT(void); //FUNCIÓN PARA EL POTENCIÓMETRO
void TXT(void); //FUNCIÓN PARA EL TEXTO
/******************************INTERRUPCIONES*******************************/

void __interrupt() isr(void)
{
    if(PIR1bits.RCIF){ //BANDERA DE COMUNICACIÓN DEL EUSART
        opcion = RCREG; //DATOS RECIBIDOS DEL MENÚ
    }
    if(RBIF)
    {
        if(PORTBbits.RB0 == 0)
        {
            contador++;
            PORTD = contador;
            //inc_contador();
        }
        if (PORTBbits.RB1 == 0)
        {
            contador--;
            PORTD = contador;
            //dec_contador();
        }
    }
    RCIF = 0;
    RBIF = 0;
    return;
}

/******************************CODIGO PRINCIPAL*****************************/

void main(void){
    setup(); //LLAMA A LA FUNCIÓN DE CONFIGURACIÓN
    initUART();//CONFIGURACIÓND EL TRANSMISOR
  
    while(1){
        cadena(menu); //muestsra el menú
        opcion = '\0';
        while(opcion == '\0'); //MIENTRAS NO INGRESE NADA
                switch(opcion){
            case '1':   //DE INGRESARSE 2, EJECUTAR LA FUNCIÓN DE ASCII
                TXT(); // ENVÍA EL VALOR AL PUERTO A
                break;
                
            case '2':
                //contador_valor();
                cadena("El valor del contador es:");
                char CONTAR[8]; //VARIABLE DEL POTENCIÓMETRO
                sprintf(CONTAR, "%d\r", contador); //CVPOT RECIBE EL VALOR DE Vpot DECODIFICADO
                cadena(CONTAR);
                break;
                
            default:    //opcion no existente
                cadena("No existe esa opcion, presione enter para continuar \r"); //CASO QUE INGRESE ALGO QUE NO EXISTA
                while(RCREG != 13); //MIENTRAS NO PRESIONE ENTER PARA CONTINUAR
             
        }   
       
        __delay_ms(100); // ESPERA UN DELAY
    }
    return;
}
/*******************************Funciones***********************************/
void setup(void)
{
    ANSEL = 0x0;// NINGÚN PIN ANALÓGICO
    ANSELH = 0;
    TRISA = 0x0;//TODAS SALIDAS
    TRISB = 0X3; //PRIMER PIN COMO ENTRADA
    TRISD = 0;
    TRISE = 0;// PUERTO B, D Y E SALIDAS
    
    //LIMPIEZA DE LOS PUERTOS A, B, D Y E
    PORTA = 0;
    PORTB = 0;
    PORTD = 0;
    PORTE = 0;
    //FIN DE LA LIMPIEZA DE PUERTOS
    
    OSCCON = 0x75; //CONFIGURACIÓN DEL RELOJ A 8 MHz
    
    
     //CONFIGURACIÓN PULL UPS
    OPTION_REGbits.nRBPU = 0; 
    WPUBbits.WPUB0 = 1;
    WPUBbits.WPUB1 = 1;
    
    //BANDERAS DE INTERRUPCIONES
    GIE = 1;    //INTERRUPCIÓN GLOBAL HABILITADA
    IOCB0 = 1;
    IOCB1 = 1;
    RBIE = 1; //INTERRUPCIONES DEL PUERTO B HABILITADAS
    RBIF = 0; //BAJA LA BANDERA
    PEIE = 1;   //INTERRUPCIONES PERIFÉRICAS HABILITADAS
    //FIN DE LA CONFIGURACIÓN DE LAS INTERRUPCIONES
    
    ADCON0bits.CHS = 0b0000; //CANAL ANALÓGICO 0
      __delay_ms(10); //ESPERA UN PEQUEÑO DELAY
    ADCON1bits.ADFM = 0;    //JUSTIFICACIÓN A LA IZQUIERDA
    ADCON1bits.VCFG1 = 0;      //VSS 5V
    ADCON1bits.VCFG0 = 0;      //VDD 0V VOLTAJES DE REFERENCIA
    ADCON0bits.ADCS1 = 1;
    ADCON0bits.ADCS0 = 0;       //FOSC/32
    //FIN DE LA CONFIGURACIÓN DEL ADC
    
    return;
    
}

void initUART(void){
    
    SPBRG = 12; //SPBRGH:SPBRG  = [(8Mhz/9600)/64]-1 = 12 ? real 9615.38
    SPBRGH = 0; //%error = (9615.38-9600)/9600 * 100 = 0.16%
    BRGH = 0;   
    BRG16 = 0;
    
    
    CREN = 1; //HABILITA EL RECEPTOR
    SYNC = 0;   // TXSTAbits ? habilitar transmision & TXIF = 1
    SPEN = 1;   //RCSTAbits ? apagar bandera TX
    TXSTAbits.TXEN = 1; //permite transmitir
    
    
    RCSTAbits.RX9 = 0;//9 BITS HABILITADOS
    
    //paso 4
    TXEN = 1;//TRANSMISIÓN HABILITADA
    TXIF = 0;//BANDERA EN 0
    //C
    
    //paso 5: interrupciones
    PIE1bits.RCIE = 1; //HABILITA LA INTERRUPCIÓN DEL EUSART
    PIR1bits.RCIF = 0; //COLOCA LA BANDERA EN 0
    
}

void cadena(char txt[]){ //FUNCIÓN PARA MOSTRAR EN LA TERMINAL
    for(int i = 0; txt[i] != '\0'; i++){ //RECORRER LA CADENA HASTA QUE SE ACABE
        while(!PIR1bits.TXIF); //MIENTRAS TXIF ESTÉ EN 0
        TXREG = txt[i]; //TXREG RECIBE EL CARACTER DE TXT EN POSICIÓN I
    }
    return;
}

void TXT(void){//MENÚ
    cadena("Ingrese su caracter: ");
                opcion = '\0';
                while(opcion == '\0'); //MIENTRAS OPCIÓN VALGA 0
                PORTA = opcion; //PUERTO B RECIBE OPCIÓN
                TXREG = opcion; //TXREG RECIBE OPCIÓN 
                TXREG = '\r'; 
                return;
}

void contador_valor(void)
{
    cadena("El Valor del contador es: ");
    return;
}

